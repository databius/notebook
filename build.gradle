plugins {
    id "java"
    id "scala"
    id "dev.jacomet.logging-capabilities" version "0.9.0"
    id "com.diffplug.gradle.spotless" version "3.28.1"
    id "idea"
}

def scalaMajorVersion = "2.13"
def scalaVersion = "$scalaMajorVersion.5"
def scalaVersionStrict = "$scalaVersion!!"

repositories {
    mavenCentral()
}

/*
since scala plugin compile java before scala, have to put java to
scala source to compile mixed sourcecode
*/
sourceSets {
    main {
        scala {
            srcDirs = ["src/main/scala", "src/main/java"]
        }
        java {
            srcDirs = []
        }
    }
}

java {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
}

configurations {
    scalaCompilerPlugin
}

//workaround for issue https://github.com/gradle/gradle/issues/6854
configurations.all {
    if (name.startsWith("incrementalScalaAnalysis")) {
        extendsFrom = []
    }
}

loggingCapabilities {
    enforceLogback("runtimeOnly")
}

spotless {
    scala {
        target "src/main/scala", "src/test/scala"
        scalafmt().configFile("scalafmt.conf")
    }
}

jar.enabled = false

idea {
    module {
        downloadJavadoc = true
        downloadSources = true
    }
}

dependencies {
    implementation("org.scala-lang:scala-library:$scalaVersionStrict")
    implementation("org.scala-lang:scala-compiler:$scalaVersionStrict")

    implementation("org.slf4j:slf4j-api:1.7.25")
    implementation("ch.qos.logback:logback-classic:1.1.3")

    testImplementation("junit:junit:4.12")
    testImplementation("com.vladsch.flexmark:flexmark-all:0.35.10") {
        because "scalatest depends on it but does not declare as dependency: https://github.com/scalatest/scalatest/issues/1736"
    }
    testImplementation("org.scalatest:scalatest_$scalaMajorVersion:3.2.2")
    testImplementation("org.scalatestplus:scalacheck-1-14_$scalaMajorVersion:3.2.2.0")
}

tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
}

tasks.withType(ScalaCompile) {
    scalaCompileOptions.forkOptions.memoryMaximumSize = "1g"
    scalaCompileOptions.forkOptions.jvmArgs += "-Dbigquery.project=" + bigquery_project
    scalaCompileOptions.additionalParameters = [
            "-Xplugin:" + configurations.scalaCompilerPlugin.asPath,
            // these are compiler language flags which turn off the warnings corresponding to the use of such features
            // the warnings are simply that you are using an "advanced/non-standard" feature
            "-language:implicitConversions",
            "-language:higherKinds",
            "-language:postfixOps",
            // these turn on detailed warnings about use of specific compiler features
            // otherwise there will still be a warning about use of features but with no details
            "-feature",
            // Enable support for macro annotations, formerly in macro paradise.
            // https://docs.scala-lang.org/overviews/macros/annotations.html
            "-Ymacro-annotations"
    ]
}

//so that gradle can run both JUnit and scalatest
task scalaTest(dependsOn: ["testClasses"], type: JavaExec) {
    main = "org.scalatest.tools.Runner"
    args = ["-R", "build/classes/test", "-o"]
    classpath = sourceSets.test.runtimeClasspath
}
test.dependsOn scalaTest // so that running "test" would run this first, then the JUnit tests

test {
    maxParallelForks = 4
}
